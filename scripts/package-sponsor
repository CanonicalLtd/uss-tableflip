#!/usr/bin/python3
"""A little script to report any package upload activity for a specific user

It processes <series>-changes mailing list archive files to track
upload activity for a given user in each series.

This is a work in progress

TODO:
   - db-backed (constantly re-processing the mbox files is dumb, takes 1.5 mins)
   - automatically download or re-download mailbox files when not present
"""

import argparse
import os
import yaml
from prettytable import PrettyTable
import requests
import lxml
import sys
import re
from email.parser import Parser


AUTOMATION_EMAILS = [
    'Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>']

def format_publishing_history(history):
    """Print human-readable format of package upload history."""

    for creator, person_history in history.items():
        print("Package uploads by {creator}".format(creator=creator))
        publish_table = PrettyTable()
        publish_table.field_names = [
            'Package Name', 'Version', 'Series', 'Publish Date',
            'Uploader', 'Sponsor']
        for pkg_name, pkg_data in person_history.items():
            for version, upload in sorted(pkg_data.items()):
                sponsor = upload.get('Signed-By')
                if not sponsor:
                    sponsor = upload.get('Maintainer')
                    if not sponsor or sponsor in AUTOMATION_EMAILS:
                        sponsor = upload.get('Changed-By')
                publish_table.add_row(
                    [pkg_name, version, upload['Distribution'], upload['Date'],
                     creator, sponsor])
        print(publish_table)



UPLOAD_HEADER = r'From bounces@canonical.com.*'


CHANGES_KEYS = ['Checksums-Sha1', 'Original-Maintainer', 'Changes', 'Description', 'Changed-By', 'Maintainer', 'Urgency', 'Distribution', 'Version', 'Architecture', 'Binary', 'Source', 'Signed-By', 'Date', 'Format', 'http', 'https']

MULTILINE_KEYS = ['CheckSums-Sha1', 'Changes', 'Description']


def process_upload_message(msg_content, emails=None, packages=None):
    msg = Parser().parsestr(msg_content)
    for part in msg.walk():
        if part.get_content_maintype() != 'multipart':
            continue
        upload = {'Changes': ''}
        [base, changesfile] = part.get_payload()
        base_payload = base.get_payload()
        changes_payload = changesfile.get_payload()
        lines = base_payload.splitlines()
        header_match = re.match(r'(?P<Source>[^ ]*) \((?P<Version>[^)]*)\) (?P<Distribution>[^;]*);.*', lines[0])
        if header_match:
            upload.update(header_match.groupdict())
            lines = lines[2:]
        if 'Sorry, changesfile not available' not in changes_payload:
            lines += changes_payload.splitlines()
        key = 'Changes'
        for line in lines:
            if '-----BEGIN PGP SIGNATURE-----' in line:
                break
            toks = line.split(':')
            if len(toks) != 1 and toks[0] in CHANGES_KEYS:
                key = toks[0]
                if 'http' in key:  # Alias any direct project urls http(s)
                    upload['URL'] = line
                    key = None
                else:
                    upload[key] = ':'.join(toks[1:]).strip()
                    if key not in MULTILINE_KEYS:
                       key = None  # Ensure we only grab the current line
            else:
                try:
                    upload[key] += '\n' + line
                except KeyError:
                    pass

        if emails:
                uploader = upload.get('Changed-By')
                if not uploader:
                    uploader = upload.get('Signed-By')
                found_email = False
                for email in emails:
                    if email in uploader:
                        found_email = True
                        break
                if not found_email:
                    return {}
        if packages and upload.get('Source') not in packages:
               return {}
        return upload
    return {}

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-d', '--directory', type=str, default='.',
        help='Directory in which series-changes mbox files are located')
    parser.add_argument(
        '--series', type=str, default=None,
        help='Limit results to a specific series')
    parser.add_argument('--created-after', type=str, default='2013-01-01',
                        dest='created_after',
                        help=('Only report package publishes after this date.'
                              ' Default: 2013-01-01'))
    parser.add_argument('--packages', action='store', required=False,
                        default=None,
                        help='Limit results to a specific packages.')
    parser.add_argument(
        '--emails', action='append', required=False, default=[],
        help='Find package changes related to specific email addresses.')

    args = parser.parse_args()

    all_series = ['xenial', 'yakkety', 'zesty', 'artful', 'bionic', 'cosmic']
    if args.series:
        all_series = [args.series]
    for series in all_series:
        mbox_path = '{directory}/{series}-changes.mbox'.format(
            directory=args.directory, series=series)
        if not os.path.exists(mbox_path):
            print(
               'Download mbox archive file https://lists.ubuntu.com/archives/'
               '{series}-changes.mbox/{series}-changes.mbox to'
               ' {mbox_path}'.format(
                   series=series, mbox_path=mbox_path))
            continue
        with open(mbox_path) as stream:
            history = process_mbox_history(
                stream, emails=args.emails, packages=args.packages)
            format_publishing_history(history)


def process_mbox_history(stream, emails=None, packages=None):
    """Process a package upload history from mail archive.

    @return: A dict of uploads filtered specific uploader or package name.
    """
    history = {}
    msg = []
    for line in stream.readlines():
        if re.match(UPLOAD_HEADER, line):
            if msg:
                upload = process_upload_message(''.join(msg), emails, packages)
                if upload:
                    pkg_name = upload.get('Source')
                    uploader = upload.get('Changed-By')
                    if not history.get(uploader):
                        history[uploader] = {}
                    if not history[uploader].get(pkg_name):
                        history[uploader][pkg_name] = {}
                    history[uploader][pkg_name][upload.get('Version')] = upload
            msg = []
        msg.append(line)
    if msg:
        upload = process_upload_message(''.join(msg), emails, packages)
        if upload:
            pkg_name = upload.get('Source')
            uploader = upload.get('Changed-By')
            if not history.get(uploader):
                history[uploader] = {}
            if not history[uploader].get(pkg_name):
                history[uploader][pkg_name] = {}
            history[uploader][pkg_name][upload.get('Version')] = upload
    return history


if __name__ == '__main__':
    main()
