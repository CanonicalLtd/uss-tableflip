#!/bin/bash
# https://gist.github.com/smoser/6391b854e6a80475aac473bba4ef0310

VERBOSITY=0
TEMP_D=""
START_D="$PWD"

cleanup(){
    [ ! -d "$TEMP_D" ] || rm -Rf "$TEMP_D";
    git worktree prune
}
error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }

Usage() {
    cat <<EOF
Usage: ${0##*/} [ options ] <<ARGUMENTS>>

   build a package, put output in ../out

   options:
      --ref R         what to build from [default to current branch].
    -o | --output D   put output in D. [default ../out]
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

get_genchanges_version() {
    local pkg_name="$1" suite="$2" collapsed_args="$3" devel=""
    # if args already had a '-v' in it, then do nothing.
    _RET=""
    [ "${collapsed_args#* -v}" = "${collapsed_args}" ] ||
        { debug 1 "-v already present in args"; return 0; }
    devel=$(distro-info --devel)
    [ "$suite" = "$devel" ] &&
        { debug 1 "-v not relevant for devel suite ($suite)"; return 0; }
    [ "$(echo $suite | tr '[a-z]' '[A-Z]')" = "UNRELEASED" ] &&
        { debug 1 "-v not relevant for unreleased"; return 0; }
    if ! command -v rmadison >/dev/null 2>&1; then
        debug 1 "rmadison not available."
        return 0
    fi
    local ga_suite="" ga_version="" updates_suite="" updates_version=""
    case "$suite" in
        *-proposed|*-updates)
            updates_suite=${suite%-*}-updates
            ga_suite=${suite%-*};;
        *)
            updates_suite="$suite-updates";
            ga_suite=${suite};;
    esac
    updates_version=$(
        rmadison --url=ubuntu --suite="${updates_suite}" $pkg_name |
        awk '-F|' '$4 ~ /source/ {gsub(/ /, ""); print $2}')
    ga_version=$(
        rmadison --url=ubuntu --suite="${ga_suite}" $pkg_name |
        awk '-F|' '$4 ~ /source/ {gsub(/ /, ""); print $2}')
    debug 1 "$pkg_name versions updates=${updates_version} ga=${ga_version}"
    if [ -n "$updates_version" ]; then
        _RET="-v${updates_version}"
    elif [ -n "$ga_version" ]; then
        _RET="-v${ga_version}"
    else
        error "Failed to get version info for $pkg_name in" \
            "$updates_suite or $ga_suite."
        return 1
    fi
}

main() {
    local short_opts="ho:v"
    local long_opts="help,output:,offset:,ref:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next="" out_d="../out" ref="" offset="0"

    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -h|--help) Usage ; exit 0;;
               --offset) offset=$next; shift;;
            -o|--output) out_d=$next; shift;;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
               --ref) ref=$next; shift;;
            --) shift; break;;
        esac
        shift;
    done

    if [ -z "$ref" ]; then
        cur_branch=$(git rev-parse --abbrev-ref HEAD) ||
            fail "failed to get current branch"
        ref="$cur_branch"
    fi

    TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX") ||
        fail "failed to make tempdir"
    trap cleanup EXIT

    local wtd="${TEMP_D}/wtd" pkg_ver pkg_name upstream_ver upstream_hash
    local orig_tarball orig_tarball_fp
    git worktree add --force "$wtd" "$ref" ||
        fail "failed worktree add $wtd $ref"

    pkg_ver=$( cd "$wtd" && dpkg-parsechangelog --show-field Version) ||
        fail "failed reading package version"
    pkg_name=$(cd "$wtd" && dpkg-parsechangelog --show-field Source) ||
        fail "failed to read Source from changelog"
    suite=$(cd "$wtd" && dpkg-parsechangelog --show-field Distribution) ||
        fail "failed to read Distribution from changelog"

    upstream_ver=${pkg_ver%-*}
    # turn 0.7.7-10-gbc2c326-0ubuntu1 into 'bc2c326'
    upstream_hash=${upstream_ver##*-g}

    local native=false
    local dsf="debian/source/format"
    if [ -f "$wtd/$dsf" ]; then
        local fmt="" native3="3.0 (native)"
        read fmt < "$wtd/$dsf"
        case "$fmt" in
            "$native3"|*native*)
                debug 0 "package ${pkg_name} is native per $dsf"
                native=true;;
        esac
    fi
    if [ "$native" = "false" ]; then
        case "${pkg_ver}" in
            *-*) :;;
            *) debug 0 "package ${pkg_name} is native per version ${pkg_ver}"
                native=true;;
        esac
    fi

    if [ "$native" = "true" ]; then
        # rename this dir from 'wtd' to <pkg>-<ver> as the top level dir
        # gets used in the tarball.
        mv "$wtd" "${TEMP_D}/$pkg_name-$pkg_ver"
        wtd="${TEMP_D}/$pkg_name-$pkg_ver"
    else
        local upstream_no_epoch=${upstream_ver#*:}
        orig_tarball="${pkg_name}_${upstream_no_epoch}.orig.tar.gz"
        error "pkg_name=$pkg_name pkg_ver=$pkg_ver upstream_ver=$upstream_ver orig_tarball=$orig_tarball"
        orig_tarball_fp=""
        for p in .. ../dl; do
            [ -e "$p/$orig_tarball" ] &&
                orig_tarball_fp="$p/$orig_tarball" && break
        done
        if [ -n "$orig_tarball_fp" ]; then
            error "Using existing orig tarball in $orig_tarball_fp"
        elif [ -x tools/make-tarball ]; then
            if [ ! -d "../dl" ]; then
                mkdir ../dl ||
                   fail "failed to create ../dl from $PWD"
                error "created ../dl from $PWD for orig tarballs."
            fi
            orig_tarball_fp="../dl/$orig_tarball"
            error "creating $orig_tarball_fp using" \
                "make-tarball --output=$orig_tarball_fp $upstream_hash"
            ./tools/make-tarball "--output=$orig_tarball_fp" "$upstream_hash" ||
                fail "failed to make tarball"
        else
            get-orig-tarball -v ${offset:+--offset=${offset}} ||
                fail "failed to get orig tarball for $pkg_name at $pkg_ver"
            orig_tarball_fp=$(for f in \
                ../${pkg_name}_${upstream_ver}.orig.*; do [ -f "$f" ] &&
                echo "$f"; done)
            [ -n "$orig_tarball_fp" ] ||
                fail "did not get a tarball with get-orig-tarball"
            [ -f "$orig_tarball_fp" ] ||
                fail "orig tarball not a file: $orig_tarball_fp"
            error "using orig tarball $orig_tarball_fp"
        fi

        local ofp_name
        ofp_name=$(basename "$orig_tarball_fp")
        orig_tarball_fp=$(readlink -f "$orig_tarball_fp") ||
            fail "failed to get full path to $orig_tarball_fp"
        ln -s "$orig_tarball_fp" "$TEMP_D/${ofp_name}"
    fi

    if [ "$native" != "true" ]; then
        local debtar="${TEMP_D}/extra/debian.tar"
        mkdir "${TEMP_D}/extra" || fail "failed mkdir ${TEMP_D}/extra"

        # copy out debian dir.
        tar -C "$wtd" -cf "${TEMP_D}/extra/debian.tar" debian/ ||
            fail "failed to create tarball of debian."

        # clean wtd completely and create empty dir.
        rm -Rf "$wtd" ||
            fail "failed removing $wtd"
        mkdir "$wtd" ||
            fail "failed creating $wtd"

        # extract upstream tarball, remove it's debian dir, extract ours.
        # not certain that removal is correct, may be correct to 
        # just extract our debian over the top.
        tar -C "$wtd" --strip-components=1 -xf "${orig_tarball_fp}" ||
            fail "failed to extract $orig_tarball_fp in $wtd"
        if [ -d "$wtd/debian" ]; then
            debug 0 "Removing upstream's debian dir in favor of packaging."
            rm -Rf "$wtd/debian" ||
                fail "failed removing debian dir from upstream tarball."
        fi
        tar -C "$wtd" -xf "$debtar" ||
            fail "failed extracting debian tarball in wordir"
    else
        rm -Rf "$wtd/.git" || fail "failed removing .git dir"
    fi

    # try to magically add '-v' if its not present.
    local genchanges_v=""
    get_genchanges_version "$pkg_name" "$suite" " $* " ||
        fail "Failed to get genchanges version for $pkg_name $suite ' $* '"
    genchanges_v="$_RET"

    if [ $# -eq 0 ]; then
        set -- -d -S -nc ${genchanges_v}
    elif [ -n "${genchanges_v}" ]; then
        set -- "$@" ${genchanges_v}
    fi

    debug 0 "building with:" "$@"
    ( cd "$wtd" && debuild "$@" ) || fail "FAILED: debuild $*"

    ( for f in "$TEMP_D/"*; do echo "$f"; done )

    mkdir -p "$out_d"
    for f in "${TEMP_D}/"*; do
        [ -f "$f" ] || continue
        cp "$f" "$out_d/" && echo "wrote ${out_d}/${f##*/}" ||
            fail "failed to copy $f to $out_d"
    done
    return 0
}

main "$@"
# vi: ts=4 expandtab
